const RSS_FEED_URLS = [
  'https://www.kompas.com/getrss/nasional',
  'https://nasional.sindonews.com/rss',
  'http://rss.detik.com/index.php/detikcom',
  'https://www.liputan6.com/rss',
  'https://www.tribunnews.com/rss'
];

const BLOG_ID = 'YOUR_BLOGID';
const CLIENT_ID = 'YOUR_CLIENTID';
const CLIENT_SECRET = 'YOUR_CLIENT_SECRET';
const REFRESH_TOKEN = 'YOUR_REFRESH_TOKEN';
const LOG_SHEET_NAME = 'PostedLog';

// === Ambil access token ===
function getAccessToken() {
  const tokenUrl = 'https://oauth2.googleapis.com/token';
  const options = {
    method: 'post',
    payload: {
      client_id: CLIENT_ID,
      client_secret: CLIENT_SECRET,
      refresh_token: REFRESH_TOKEN,
      grant_type: 'refresh_token'
    },
    muteHttpExceptions: true
  };
  const response = UrlFetchApp.fetch(tokenUrl, options);
  const result = JSON.parse(response.getContentText());
  if (result.error) throw new Error(result.error_description);
  return result.access_token;
}

// === Posting ke Blogger sebagai draft ===
function postToBlogger(title, content) {
  const accessToken = getAccessToken();
  const url = `https://www.googleapis.com/blogger/v3/blogs/${BLOG_ID}/posts/`;
  const options = {
    method: 'post',
    contentType: 'application/json',
    payload: JSON.stringify({
      title,
      content,
      isDraft: true // Draft mode
    }),
    headers: { Authorization: `Bearer ${accessToken}` },
    muteHttpExceptions: true
  };
  const response = UrlFetchApp.fetch(url, options);
  const result = JSON.parse(response.getContentText());
  if (result.error) throw new Error(result.error.message);
  return result;
}

// === Logging ===
function getLogSheet() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  let sheet = ss.getSheetByName(LOG_SHEET_NAME);
  if (!sheet) sheet = ss.insertSheet(LOG_SHEET_NAME).appendRow(['Title', 'Link', 'Posted At']);
  return sheet;
}

function isAlreadyPosted(link) {
  const sheet = getLogSheet();
  if (sheet.getLastRow() < 2) return false;
  const links = sheet.getRange(2, 2, sheet.getLastRow() - 1, 1).getValues().flat();
  return links.includes(link);
}

function storePostedLink(title, link) {
  getLogSheet().appendRow([title, link, new Date()]);
}

// === SCRAPER ===
function scrapeContentAndImage(url) {
  try {
    const html = UrlFetchApp.fetch(url, { muteHttpExceptions: true }).getContentText();
    const domain = url.match(/https?:\/\/([^\/]+)/)?.[1];
    if (!domain) return { content: null, image: null };

    let content = null;
    let image = null;

    if (domain.includes('kompas.com')) {
      content = html.match(/<div class="read__content"[^>]*>([\s\S]*?)<\/div>/)?.[1];
      image = html.match(/<meta property="og:image" content="([^"]+)"/)?.[1];
    } else if (domain.includes('sindonews.com')) {
      content = html.match(/<div class="detail-text"[^>]*>([\s\S]*?)<\/div>/)?.[1];
      image = html.match(/<meta property="og:image" content="([^"]+)"/)?.[1];
    } else if (domain.includes('detik.com')) {
      content = html.match(/<div class="detail__body-text itp_bodycontent"[^>]*>([\s\S]*?)<\/div>/)?.[1];
      image = html.match(/<meta property="og:image" content="([^"]+)"/)?.[1];
    } else if (domain.includes('liputan6.com')) {
      content = html.match(/<div class="article-content-body__item-content"[^>]*>([\s\S]*?)<\/div>/)?.[1];
      image = html.match(/<meta property="og:image" content="([^"]+)"/)?.[1];
    } else if (domain.includes('tribunnews.com')) {
      content = html.match(/<div class="side-article txt-article"[^>]*>([\s\S]*?)<\/div>/)?.[1];
      image = html.match(/<meta property="og:image" content="([^"]+)"/)?.[1];
    }

    return { content, image };
  } catch (e) {
    Logger.log(`❌ Gagal scraping ${url}: ${e.message}`);
    return { content: null, image: null };
  }
}

// === MAIN FUNCTION ===
function autoPostFromMultiRSS() {
  for (const rssUrl of RSS_FEED_URLS) {
    try {
      const xml = UrlFetchApp.fetch(rssUrl).getContentText();
      const doc = XmlService.parse(xml);
      const root = doc.getRootElement();
      let items;

      // Handle Atom vs RSS 2.0
      if (root.getName() === 'feed') {
        items = root.getChildren('entry');
      } else if (root.getName() === 'rss') {
        const channel = root.getChild('channel');
        if (channel) {
          items = channel.getChildren('item');
        } else {
          Logger.log(`❌ RSS channel not found for ${rssUrl}`);
          continue;
        }
      } else {
        Logger.log(`❌ Unsupported RSS feed type for ${rssUrl}: ${root.getName()}`);
        continue;
      }

      for (const item of items) {
        let title, link, description;

        if (root.getName() === 'feed') { // Atom
          title = item.getChildText('title');
          link = item.getChild('link').getAttribute('href').getValue();
          description = item.getChildText('summary') || item.getChildText('content');
        } else { // RSS 2.0
          title = item.getChildText('title');
          link = item.getChildText('link');
          description = item.getChildText('description');
        }

        if (!link) {
          Logger.log(`⚠️ Skip item tanpa link: ${title}`);
          continue;
        }

        if (isAlreadyPosted(link)) {
          Logger.log(`⏩ Sudah pernah dipost: ${title}`);
          continue;
        }

        const scraped = scrapeContentAndImage(link);
        let scrapedContent = scraped.content || description || '';
        let imageTag = scraped.image ? `<p><img src="${scraped.image}" alt="${title}" /></p>` : '';

        // === Prompt AI auto-generator ===
        const content = `${title} AI auto-generator\n\n${scrapedContent}\n\n${imageTag}`;

        postToBlogger(title, content);
        storePostedLink(title, link);
        Logger.log(`✅ Draft AI + gambar berhasil dibuat: ${title}`);
        break; // hanya 1 artikel per feed
      }
    } catch (e) {
      Logger.log(`❌ Error RSS ${rssUrl}: ${e.message}`);
    }
  }
}
